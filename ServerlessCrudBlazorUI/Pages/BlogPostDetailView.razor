@page "/detail/{dateString}/{rowKey}"

@using System.Security.Claims
@using ServerlessCrudClassLibrary
@using ServerlessCrudBlazorUI.Services
@using ServerlessCrudBlazorUI.Services.APIClients

@inject AnnonymousCrudFunctionAPIClient client
@inject AuthenticationStateProvider authStateProvider

<div class="main mb-4">
    <div class="content pl-4 pb-4">
        @if (hasLoaded)
        {
            <div>
                <h3>
                    @blogPost.Title
                </h3>
                <p>
                    <small>By @blogPost.Author &mdash; Last updated: @blogPost.Timestamp.ToLocalTime().ToString("HH:mm d MMMM yyyy")</small>
                </p>
            </div>
            <div>
                @try
                {
                    <div class="multiline">@PrettyPrinter.ParseMarkdownToHTML(blogPost.Text)</div>
                }
                catch (ArgumentException)
                {
                    <div class="multiline">@blogPost.Text</div>
                }
            </div>
            @if (userOID == blogPost.AuthorOID)
            {
                <NavLink href="@($"/editor?partitionkey={PrettyPrinter.BlogPostPartitionKeyFromDateString(DateString)}&rowkey={RowKey}")">Edit</NavLink>
            }
            <CommentSection BlogPost="blogPost" Commenter="user"></CommentSection>
        }
    </div>
</div>
<Sidebar>
    @if (hasLoaded)
    {
        <h4>About @blogPost.Author</h4>
        <p>
            Vivamus id lectus lorem. Curabitur varius lectus mattis,
            venenatis mauris tristique, porttitor nulla. Nam et scelerisque sem,
            vitae eleifend mi. Proin tincidunt eros non nisi viverra fringilla.
        </p>
    }
</Sidebar>

@code {
    [Parameter]
    public string DateString { get; set; }
    [Parameter]
    public string RowKey { get; set; }

    private ClaimsPrincipal user { get; set; }
    private BlogPostEntity blogPost { get; set; }
    private bool hasLoaded { get; set; } = false;
    private string userOID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        user = (await authStateProvider.GetAuthenticationStateAsync()).User;
        userOID = user.Identity.IsAuthenticated ? user.Claims.Where(claim => claim.Type == "oid").First().Value : "";
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        blogPost = await client.GetBlogPostEntityAsync(
            PrettyPrinter.BlogPostPartitionKeyFromDateString(DateString),
            RowKey);

        hasLoaded = true;
    }
}
