@page "/blogposts"

@using Blazored.LocalStorage
@using ServerlessCrudClassLibrary.TableEntities
@using ServerlessCrudBlazorUI.Services

@inject BlogPostService blogPostService
@inject ILocalStorageService localStorage

<div class="main mb-4">
    <div class="content pl-4 pb-4">
        <h3>Blog Posts</h3>

        @if (hasInitialized)
        {
            <ul class="list-group">
                @foreach (BlogPostEntity post in blogPostsOnPage)
                {
                    <NavLink class="list-group-item  list-group-item-action"
                             href="@($"/detail/{PrettyPrinter.DateStringFromBlogPostPartitionKey(post.PartitionKey)}/{post.RowKey}")">
                        <div>
                            <h4>
                                @post.Title
                            </h4>
                            <p class="text-muted">
                                By @post.Author &mdash; @post.Timestamp.ToLocalTime().ToString("d MMMM yyyy")
                            </p>
                        </div>
                        <div class="">
                            <p class="">
                                @((post.Text.Length < 300) ? post.Text : $"{post.Text.Substring(0, 300)} ...")
                            </p>
                        </div>
                    </NavLink>
                }
            </ul>

            <ul class="pagination justify-content-center">
                <li class="page-item  @((index == 0) ? "disabled" : "")">
                    <button class="page-link" type="button" @onclick="@(async () => await GoToPage(0))">
                        <i class="fa fa-angle-double-left"></i>
                    </button>
                </li>
                <li class="page-item @((index == 0) ? "disabled" : "")">
                    <button class="page-link" type="button" @onclick="@(async () => await GoToPage(index - 1))">
                        <i class="fa fa-angle-left"></i>
                    </button>
                </li>

                @for (int i = (index < radiusOfPages) ? 0 : index - radiusOfPages; i <= ((index + radiusOfPages < blogPostService.NumOfPages) ? index + radiusOfPages : blogPostService.NumOfPages - 1); i++)
                {
                    // Workaround, since i gets incremented, but a is declared local to the loop.
                    int a = i;
                    <li class="page-item @((i == index) ? "active" : "")">
                        <button class="page-link" type="button" @onclick="@(async() => await GoToPage(a))">@(i + 1)</button>
                    </li>
                }

                <li class="page-item @((index + 1 < blogPostService.NumOfPages) ? "" : "disabled")">
                    <button class="page-link" type="button" @onclick="@(async() => await GoToPage(index + 1))">
                        <i class="fa fa-angle-right"></i>
                    </button>
                </li>
                <li class="page-item @((index + 1 < blogPostService.NumOfPages) ? "" : "disabled")">
                    <button class="page-link" type="button" @onclick="@(async() => await GoToPage(blogPostService.NumOfPages - 1))">
                        <i class="fa fa-angle-double-right"></i>
                    </button>
                </li>
            </ul>
        }
        else
        {
            <p>
                Fetching blog posts...
            </p>
        }
    </div>
</div>
<Sidebar>
    <BlogPostSearch PartitionKeys="blogPostService.PartitionKeys" RowKeys="blogPostService.RowKeys" />
</Sidebar>

@code {
    private bool hasInitialized = false;
    private readonly static int radiusOfPages = 2;

    private int index { get; set; } = 0;
    private BlogPostEntity[] blogPostsOnPage { get; set; }

    private async Task GoToPage(int i)
    {
        blogPostsOnPage = await blogPostService.GetBlogPostsOnPageAsync(i);

        index = i;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GoToPage(0);

        hasInitialized = true;
    }
}
