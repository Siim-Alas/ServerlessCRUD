@page "/blogposts"

@using ServerlessCrudClassLibrary
@using ServerlessCrudBlazorUI.Services
@using ServerlessCrudClassLibrary.Utilities
@inject UnauthorizedCrudFunctionAPIClient client

<h3>Blog Posts</h3>

@if (hasInitialized)
{
    <ul class="list-group">
        @foreach (BlogPostEntity post in blogPosts[index])
        {
            <NavLink class="list-group-item  list-group-item-action" 
                     href="@($"/detail/{PrettyPrinter.DateStringFromBlogPostPartitionKey(post.PartitionKey)}/{post.RowKey}")">
                <div>
                    <h4>
                        @post.Title
                    </h4>
                    <p class="text-muted">
                        By @post.Author &mdash; @post.Timestamp.ToLocalTime().ToString("d MMMM yyyy")
                    </p>
                </div>
                <div class="">
                    <p class="">
                        @((post.Text.Length < 300) ? post.Text : $"{post.Text.Substring(0, 300)} ...")
                    </p>
                </div>
            </NavLink>
        }
    </ul>

    <ul class="pagination justify-content-center">
        <li class="page-item @((index == 0) ? "disabled" : "")">
            <button class="page-link" type="button" @onclick="Previous">Previous</button>
        </li>

        @for (int i = (index < radiusOfPages) ? 0 : index - radiusOfPages; i <= ((index + radiusOfPages < numOfPages) ? index + radiusOfPages : numOfPages - 1); i++)
        {
            // Workaround, since i gets incremented, but a is declared local to the loop.
            int a = i;
            <li class="page-item @((i == index) ? "active" : "")">
                <button class="page-link" type="button" @onclick="@(async() => await GoToIndex(a))">@(i + 1)</button>
            </li>
        }

        <li class="page-item @((index + 1 < numOfPages) ? "" : "disabled")">
            <button class="page-link" type="button" @onclick="Next">Next</button>
        </li>
    </ul>
}
else
{
    <p>
        Fetching blog posts...
    </p>
}

@code {
    private bool hasInitialized = false;
    private readonly static int numberOfEntitiesOnPage = 2;
    private readonly static int radiusOfPages = 3;

    private int index { get; set; } = 0;
    private ListBlogPostEntitiesRequest request { get; set; } = new ListBlogPostEntitiesRequest(takeCount: numberOfEntitiesOnPage);
    private List<List<BlogPostEntity>> blogPosts { get; set; }
    private TableMetadata metadata { get; set; }
    private string userName { get; set; }

    private int numOfPages { get { return (int)Math.Ceiling((decimal)(metadata.NumberOfEntities) / (decimal)numberOfEntitiesOnPage); } }
    private bool allPagesDisplayed { get { return numOfPages <= 2 *radiusOfPages + 1; } }

    private async Task GetNewPosts()
    {
        request = await client.PostListBlogPostsRequestAsync(request);
    }

    private async Task GoToIndex(int i)
    {
        while (index > i)
        {
            Previous();
        }

        while (index < i)
        {
            await Next();
        }
    }

    private void Previous()
    {
        if (--index < 0)
        {
            index = 0;
        }
    }

    private async Task Next()
    {
        if (index + 1 < numOfPages)
        {
            await GetNewPosts();
            blogPosts.Add(request.BlogPosts);
            index++;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GetNewPosts();
        metadata = await client.GetTableMetadataAsync();
        blogPosts = new List<List<BlogPostEntity>>(numOfPages)
        {
            request.BlogPosts
        };

        hasInitialized = true;
    }
}
