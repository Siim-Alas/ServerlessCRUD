@page "/editor"

@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using ServerlessCrudClassLibrary
@using ServerlessCrudBlazorUI.Services

@inject AuthorizedCrudFunctionAPIClient authorizedClient
@inject UnauthorizedCrudFunctionAPIClient unauthorizedClient
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider authStateProvider

<div class="main mb-4">
    <div class="content pl-4 pb-4">
        <h3>Blog Post Editor</h3>

        <EditForm Model="blogPost" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (blogPostAlreadyExists)
            {
                <div class="form-group">
                    <h4>@blogPost.Title</h4>
                    <p>By @blogPost.Author &mdash; Last updated: @blogPost.Timestamp.ToLocalTime().ToString("hh:mm d MMMM yyyy")</p>
                </div>
            }
            else
            {
                <div class="form-group">
                    <label for="title">Post Title</label>
                    <InputText id="title" class="form-control" @bind-Value="blogPost.Title"></InputText>
                </div>
            }
            <div class="form-group">
                <label for="text">Text</label>
                <InputTextArea id="text" class="form-control" rows="20" @bind-Value="blogPost.Text"></InputTextArea>
            </div>

            <button class="btn btn-dark" type="submit">Submit</button>
        </EditForm>

        @if (blogPostAlreadyExists)
        {
            <button class="btn btn-danger" type="button" @onclick="OnDeleteButtonClicked">Delete</button>
        }
    </div>
</div>
<Sidebar>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Markdown</th>
                <th scope="col">Result</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>*italic*</td>
                <td>@PrettyPrinter.ParseMarkdownToHTML("*italic*")</td>
            </tr>
            <tr>
                <td>**bold**</td>
                <td>@PrettyPrinter.ParseMarkdownToHTML("**bold**")</td>
            </tr>
            <tr>
                <td># Heading 1\n</td>
                <td>@PrettyPrinter.ParseMarkdownToHTML("# Heading 1\n")</td>
            </tr>
            <tr>
                <td>## Heading 2\n</td>
                <td>@PrettyPrinter.ParseMarkdownToHTML("# Heading 2\n")</td>
            </tr>
            <tr>
                <td>[Link text](https://www.google.com/)</td>
                <td>@PrettyPrinter.ParseMarkdownToHTML("[Link text](https://www.google.com/)")</td>
            </tr>
            <tr>
                <td>![Image](favicon.ico)</td>
                <td>@PrettyPrinter.ParseMarkdownToHTML("![Image](favicon.ico)")</td>
            </tr>
            <tr>
                <td>> Blockquote</td>
                <td>@PrettyPrinter.ParseMarkdownToHTML("> Blockquote")</td>
            </tr>
            <tr>
                <td>---</td>
                <td>@PrettyPrinter.ParseMarkdownToHTML("---")</td>
            </tr>
            <tr>
                <td>`code`</td>
                <td>@PrettyPrinter.ParseMarkdownToHTML("`code`")</td>
            </tr>
        </tbody>
    </table>
</Sidebar>

@code {
    private BlogPostEntity blogPost { get; set; } = new BlogPostEntity("title", "author", "...");
    private bool blogPostAlreadyExists { get; set; } = false;

    private async Task OnValidSubmit()
    {
        if (blogPost.IsValid)
        {
            await JsRuntime.InvokeVoidAsync(
                "alert",
                ((await authorizedClient.PostBlogPostAsync(blogPost)).StatusCode == System.Net.HttpStatusCode.OK) ?
                "Your blog post has been saved." : "Something went wrong.");

            navigationManager.NavigateTo("/blogposts");
        }
    }

    private async Task OnDeleteButtonClicked()
    {
        if ((blogPost.IsValid) &&
            (await JsRuntime.InvokeAsync<bool>(
                "confirm",
                "Are you sure you want to delete the post? This cannot be undone."
           )))
        {
            await JsRuntime.InvokeVoidAsync(
                "alert",
                ((await authorizedClient.PostDeleteBlogPostEntityAsync(blogPost)).StatusCode == System.Net.HttpStatusCode.OK) ?
                "Your blog post has been deleted." : "Something went wrong.");

            navigationManager.NavigateTo("/blogposts");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Uri uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);

        if ((QueryHelpers.ParseQuery(uri.Query).TryGetValue("partitionkey", out StringValues pk)) &&
            (QueryHelpers.ParseQuery(uri.Query).TryGetValue("rowkey", out StringValues rk)))
        {
            blogPostAlreadyExists = true;
            blogPost = await unauthorizedClient.GetBlogPostEntityAsync(pk, rk);
        }
        else
        {
            blogPost.Author = (await authStateProvider.GetAuthenticationStateAsync()).User.Identity.Name;
        }
    }
}
