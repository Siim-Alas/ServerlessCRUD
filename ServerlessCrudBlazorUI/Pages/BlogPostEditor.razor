@page "/editor"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using ServerlessCrudClassLibrary
@using ServerlessCrudBlazorUI.Services
@inject AuthorizedCrudFunctionAPIClient authorizedClient
@inject UnauthorizedCrudFunctionAPIClient unauthorizedClient
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider authStateProvider

<h3>Blog Post Editor</h3>

<EditForm Model="blogPost" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (blogPostAlreadyExists)
    {
        <div class="form-group">
            <h4>@blogPost.Title</h4>
            <p>By @blogPost.Author &mdash; Last updated: @blogPost.Timestamp.ToLocalTime().ToString("hh:mm d MMMM yyyy")</p>
        </div>
    }
    else
    {
        <div class="form-group">
            <label for="title">Post Title</label>
            <InputText id="title" class="form-control" @bind-Value="blogPost.Title"></InputText>
        </div>
    }
    <div class="form-group">
        <label for="text">Text</label>
        <InputTextArea id="text" class="form-control" rows="20" @bind-Value="blogPost.Text"></InputTextArea>
    </div>

    <button class="btn btn-dark" type="submit">Submit</button>
</EditForm>

@if (blogPostAlreadyExists)
{
    <button type="button" @onclick="OnRollbackButtonClicked">Rollback</button>
    <button type="button" @onclick="OnDeleteButtonClicked">Delete</button>
}

@code {
    private BlogPostEntity blogPost { get; set; } = new BlogPostEntity("title", "author", "...");
    private BlogPostEntity backup { get; set; }
    private bool blogPostAlreadyExists { get; set; } = false;

    private async Task OnValidSubmit()
    {
        if (blogPost.IsValid)
        {
            await JsRuntime.InvokeVoidAsync(
                "alert",
                ((await authorizedClient.PostBlogPostAsync(blogPost)).StatusCode == System.Net.HttpStatusCode.OK) ?
                "Your blog post has been saved." : "Something went wrong.");

            navigationManager.NavigateTo("/blogposts");
        }
    }

    private void OnRollbackButtonClicked()
    {
        blogPost = backup.Clone();
    }

    private async Task OnDeleteButtonClicked()
    {
        if ((blogPost.IsValid) &&
            (await JsRuntime.InvokeAsync<bool>(
                "confirm",
                "Are you sure you want to delete the post? This cannot be undone."
           )))
        {
            await JsRuntime.InvokeVoidAsync(
                "alert",
                ((await authorizedClient.PostDeleteBlogPostEntityAsync(backup)).StatusCode == System.Net.HttpStatusCode.OK) ?
                "Your blog post has been deleted." : "Something went wrong.");

            navigationManager.NavigateTo("/blogposts");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Uri uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);

        if ((QueryHelpers.ParseQuery(uri.Query).TryGetValue("partitionkey", out StringValues pk)) &&
            (QueryHelpers.ParseQuery(uri.Query).TryGetValue("rowkey", out StringValues rk)))
        {
            blogPostAlreadyExists = true;
            blogPost = await unauthorizedClient.GetBlogPostEntityAsync(pk, rk);

            backup = blogPost.Clone();
        }
        else
        {
            blogPost.Author = (await authStateProvider.GetAuthenticationStateAsync()).User.Identity.Name;
        }
    }
}
