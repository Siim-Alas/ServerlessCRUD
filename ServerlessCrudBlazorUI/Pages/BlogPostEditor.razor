@page "/editor"

@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using ServerlessCrudClassLibrary
@using Services
@inject CrudFunctionAPIClient crudClient
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime

<h3>BlogPostEditor</h3>

<EditForm Model="blogPost" OnValidSubmit="OnValidSubmit">
    Post Title
    <InputText @bind-Value="blogPost.Title"></InputText>
    Author
    <InputText @bind-Value="blogPost.Author"></InputText>
    Text
    <InputTextArea @bind-Value="blogPost.Text"></InputTextArea>

    <button type="submit">Submit</button>
</EditForm>

<button type="button" @onclick="OnRollbackButtonClicked">Rollback</button>
<button type="button" @onclick="OnDeleteButtonClicked">Delete</button>

@code {
    private BlogPostEntity blogPost { get; set; } = new BlogPostEntity("title", "author", "text");
    private BlogPostEntity backup { get; set; }

    private async Task OnValidSubmit()
    {
        if (blogPost.IsValid)
        {
            await JsRuntime.InvokeVoidAsync(
                "alert",
                ((await crudClient.PostBlogPostAsync(blogPost)).StatusCode == System.Net.HttpStatusCode.OK) ?
                "Your blog post has been saved." : "Something went wrong.");

            navigationManager.NavigateTo("/blogposts");
        }
    }

    private void OnRollbackButtonClicked()
    {
        blogPost = backup.Clone();
    }

    private async Task OnDeleteButtonClicked()
    {
        if ((blogPost.IsValid) &&
            (await JsRuntime.InvokeAsync<bool>(
                "confirm",
                "Are you sure you want to delete the post? This cannot be undone."
           )))
        {
            await JsRuntime.InvokeVoidAsync(
                "alert",
                ((await crudClient.PostDeleteBlogPostEntityAsync(backup)).StatusCode == System.Net.HttpStatusCode.OK) ?
                "Your blog post has been deleted." : "Something went wrong.");

            navigationManager.NavigateTo("/blogposts");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Uri uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);

        if ((QueryHelpers.ParseQuery(uri.Query).TryGetValue("partitionkey", out StringValues pk)) &&
            (QueryHelpers.ParseQuery(uri.Query).TryGetValue("rowkey", out StringValues rk)))
        {
            blogPost = await crudClient.GetBlogPostEntityAsync(pk, rk);
        }

        backup = blogPost.Clone();
    }
}
