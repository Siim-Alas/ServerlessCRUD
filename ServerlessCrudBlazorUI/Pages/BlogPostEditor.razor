@page "/editor"

@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using ServerlessCrudClassLibrary.TableEntities
@using ServerlessCrudBlazorUI.Services.APIClients

@inject AuthorizedCrudFunctionAPIClient authorizedClient
@inject AnnonymousCrudFunctionAPIClient unauthorizedClient
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider authStateProvider

<div class="main mb-4">
    <div class="content pl-4 pb-4">
        <h3>Blog Post Editor</h3>
        @if (hasInitialized)
        {
            <EditForm Model="blogPost" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                @if (blogPostAlreadyExists)
                {
                    <div class="form-group">
                        <h4>@blogPost.Title</h4>
                        <p>By @blogPost.Author &mdash; Last updated: @blogPost.Timestamp.ToLocalTime().ToString("HH:mm d MMMM yyyy")</p>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        <label for="title">Post Title</label>
                        <InputText id="title" class="form-control" @bind-Value="blogPost.Title"></InputText>
                    </div>
                }
                <div class="form-group">
                    <label for="text">Text</label>
                    <HTMLEditor @ref="Editor" Content="(MarkupString)blogPost.Text" />
                </div>

                <button class="btn btn-dark" type="submit">Submit</button>
            </EditForm>

            @if (blogPostAlreadyExists)
            {
                <button class="btn btn-danger" type="button" @onclick="OnDeleteButtonClicked">Delete</button>
            }
        }
    </div>
</div>
<Sidebar />

@code {
    private HTMLEditor Editor { get; set; }

    private BlogPostEntity blogPost { get; set; }
    private bool blogPostAlreadyExists { get; set; } = false;
    private bool hasInitialized { get; set; } = false;

    private async Task OnValidSubmit()
    {
        blogPost.Text = (await Editor.GetInnerHTML()).Value;
        if (blogPost.IsValid)
        {
            await JsRuntime.InvokeVoidAsync(
                "alert",
                ((await authorizedClient.PostBlogPostAsync(blogPost)).StatusCode == System.Net.HttpStatusCode.OK) ?
                "Your blog post has been saved." : "Something went wrong.");

            navigationManager.NavigateTo("/blogposts");
        }
    }

    private async Task OnDeleteButtonClicked()
    {
        if ((blogPost.IsValid) &&
            (await JsRuntime.InvokeAsync<bool>(
                "confirm",
                "Are you sure you want to delete the post? This cannot be undone."
           )))
        {
            await JsRuntime.InvokeVoidAsync(
                "alert",
                ((await authorizedClient.PostDeleteBlogPostEntityAsync(blogPost)).StatusCode == System.Net.HttpStatusCode.OK) ?
                "Your blog post has been deleted." : "Something went wrong.");

            navigationManager.NavigateTo("/blogposts");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Uri uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);

        if ((QueryHelpers.ParseQuery(uri.Query).TryGetValue("partitionkey", out StringValues pk)) &&
            (QueryHelpers.ParseQuery(uri.Query).TryGetValue("rowkey", out StringValues rk)))
        {
            blogPostAlreadyExists = true;
            blogPost = await unauthorizedClient.GetBlogPostEntityAsync(pk, rk);
        }
        else
        {
            blogPost = new BlogPostEntity(
                (await authStateProvider.GetAuthenticationStateAsync()).User,
                "title",
                (MarkupString)"<p>...</p>");
        }

        hasInitialized = true;
    }
}
