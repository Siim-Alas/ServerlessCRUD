@using ServerlessCrudClassLibrary.HttpResponseModels
@using ServerlessCrudClassLibrary.TableEntities
@using ServerlessCrudBlazorUI.Services
@using ServerlessCrudBlazorUI.Services.APIClients

@inject AnnonymousCrudFunctionAPIClient client

<div class="sidebar p-4">
    @ChildContent

    <h4>Latest Posts</h4>
    <ul class="list-group list-group-flush">
        @foreach (BlogPostEntity post in response.BlogPosts)
        {
            <li class="list-group-item">
                <h4>
                    <NavLink href="@($"/detail/{PrettyPrinter.DateStringFromBlogPostPartitionKey(post.PartitionKey)}/{post.RowKey}")">@post.Title</NavLink>
                </h4>
                <p>
                    <small>By @post.Author &mdash; @post.Timestamp.ToLocalTime().ToString("d MMMM yyyy")</small>
                </p>
            </li>
        }
    </ul>
    @if (!hasInitialized)
    {
        <p>Fetching blog posts...</p>
    }
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private QueryBlogPostEntitiesResponse response { get; set; } = new QueryBlogPostEntitiesResponse(null, new List<BlogPostEntity>());
    private bool hasInitialized { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        response = await client.GetQueryBlogPostsResponseAsync(
            takeCount: 4,
            selectColumns: new List<string>()
            {
                "PartitionKey",
                "RowKey",
                "Timestamp",
                "Author"
                });

        hasInitialized = true;
    }
}
