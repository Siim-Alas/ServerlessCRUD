@using ServerlessCrudClassLibrary.HttpResponseModels
@using ServerlessCrudClassLibrary.TableEntities
@using ServerlessCrudBlazorUI.Services

@inject BlogPostService blogPostService

<div class="sidebar p-4">
    @ChildContent

    <h4>Latest Posts</h4>

    @if (hasInitialized)
    {
        <ul class="list-group list-group-flush">
            @foreach (BlogPostEntity post in blogPosts)
            {
                <li class="list-group-item">
                    <h4>
                        <NavLink href="@($"/detail/{PrettyPrinter.DateStringFromBlogPostPartitionKey(post.PartitionKey)}/{post.RowKey}")">@post.Title</NavLink>
                    </h4>
                    <p>
                        <small>By @post.Author &mdash; @post.Timestamp.ToLocalTime().ToString("d MMMM yyyy")</small>
                    </p>
                </li>
            }
        </ul>
    }
    else
    {
        <p>Fetching blog posts...</p>
    }
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private BlogPostEntity[] blogPosts { get; set; }
    private bool hasInitialized { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        blogPosts = await blogPostService.GetBlogPostsOnPageAsync(0);

        hasInitialized = true;
    }
}
