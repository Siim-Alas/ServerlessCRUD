@using ServerlessCrudClassLibrary
@using System.Security.Claims
@using Microsoft.AspNetCore.WebUtilities
@using ServerlessCrudBlazorUI.Services.APIClients

@inject AnnonymousCrudFunctionAPIClient annonymousClient
@inject AuthenticatedCrudFunctionAPIClient authenticatedClient
@inject SocialMediaAccountsAPIClient socialMediaClient
@inject NavigationManager navigationManager

<div class="comment-section">
    <h4>Comments</h4>
    <ul class="list-group">
        <li class="list-group-item">
            @if (Commenter.Identity.IsAuthenticated)
            {
                <EditForm Model="newComment" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="text">Text</label>
                        <InputTextArea id="text" class="form-control" rows="3" @bind-Value="newComment.Text"></InputTextArea>
                    </div>

                    <button class="btn btn-dark" type="submit">Comment</button>
                </EditForm>
                <button type="button" @onclick="socialMediaClient.LogOutWithFacebook">Log out.</button>
            }
            else
            {
                <p>Sign in to comment.</p>
                <button type="button" @onclick="socialMediaClient.LogInWithFacebook">Log in with Facebook.</button>
            }
        </li>
        @if (hasLoaded)
        {
            foreach (CommentEntity comment in comments)
            {
                <li class="list-group-item">
                    <b>@comment.Author</b>
                    <p class="text-muted">Posted on @comment.Timestamp.ToLocalTime().ToString("HH:mm d MMMM yyyy")</p>
                    <p class="multiline">@comment.Text</p>
                </li>
            }
        }
    </ul>
</div>

@code {
    [Parameter]
    public BlogPostEntity BlogPost { get; set; }
    [Parameter]
    public ClaimsPrincipal Commenter { get; set; }

    private CommentEntity newComment { get; set; }
    private CommentEntity[] comments { get; set; }
    private bool hasLoaded { get; set; } = false;

    private async Task OnValidSubmit()
    {
        if (newComment.IsValid && Commenter.Identity.IsAuthenticated)
        {
            await authenticatedClient.PostCommentEntityAsync(new PostCommentEntityRequest(
                    newComment,
                    PostCommentEntityRequest.IdentityProviders.Facebook,
                    Commenter.FindFirst("userId").Value,
                    Commenter.FindFirst("accessToken").Value
                ));
            newComment = new CommentEntity(BlogPost, Commenter.FindFirst("name").Value, "...");
            await this.OnParametersSetAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Commenter.Identity.IsAuthenticated)
        {
            newComment = new CommentEntity(BlogPost, Commenter.FindFirst("name").Value, "...");
        }

        socialMediaClient.StateHasChanged += (object source, EventArgs args) =>
        {
            Commenter = socialMediaClient.User;
            newComment = new CommentEntity(BlogPost, Commenter.FindFirst("name").Value, "...");
            this.StateHasChanged();
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        comments = (await annonymousClient.GetCommentsOnBlogPost(BlogPost)) ?? new CommentEntity[0];
        hasLoaded = true;
    }
}
