@using ServerlessCrudBlazorUI.Services

@inject DocumentEditor DocumentEditor

<!-- HTML Editor -->
<div>
    <!-- Toolbar -->
    <div>
        <select @bind="@SelectedFormat" @oninput="OnFormatSelected">
            <option value="none">- Format -</option>
            @foreach (KeyValuePair<string, string> format in DocumentEditor.Formats)
            {
                <option value="@format.Value">@format.Key</option>
            }
        </select>
        <select @bind="@SelectedFont" @oninput="OnFontSelected">
            <option value="none">- Font -</option>
            @foreach (string font in DocumentEditor.Fonts)
            {
                <option>@font</option>
            }
        </select>
        <select @bind="@SelectedFontSize" @oninput="OnFontSizeSelected">
            <option value="none">- Font Size -</option>
            @foreach (string size in DocumentEditor.FontSizes)
            {
                <option>@size</option>
            }
        </select>
        <select @bind="@SelectedFontColor" @oninput="OnFontColorSelected">
            <option value="none">- Font Color -</option>
            @foreach (string color in DocumentEditor.Colors)
            {
                <option>@color</option>
            }
        </select>
        <select @bind="@SelectedBackgroundColor" @oninput="OnBackgroundColorSelected">
            <option value="none">- Background Color -</option>
            @foreach (string color in DocumentEditor.Colors)
            {
                <option>@color</option>
            }
        </select>

        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.bold); })">
            <i class="fa fa-bold"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.italic); })">
            <i class="fa fa-italic"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.underline); })">
            <i class="fa fa-underline"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.justifyLeft); })">
            <i class="fa fa-align-left"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.justifyCenter); })">
            <i class="fa fa-align-center"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.justifyRight); })">
            <i class="fa fa-align-right"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.justifyFull); })">
            <i class="fa fa-align-justify"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.insertOrderedList); })">
            <i class="fa fa-list-ol"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.insertUnorderedList); })">
            <i class="fa fa-list-ul"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.formatBlock, "blockquote"); })">
            <i class="fa fa-quote-left"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.outdent); })">
            <i class="fa fa-outdent"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.indent); })">
            <i class="fa fa-indent"></i>
        </button>
        <!-- TODO: Links -->
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.cut); })">
            <i class="fa fa-cut"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.copy); })">
            <i class="fa fa-copy"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.paste); })">
            <i class="fa fa-paste"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.undo); })">
            <i class="fa fa-undo"></i>
        </button>
        <button type="button"
                @onclick="@(async() => { await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.redo); })">
            <i class="fa fa-repeat"></i>
        </button>
    </div>
    <!-- Text Editor -->
    <div class="text-editor" contenteditable="true">
        bla
    </div>
</div>

@code {
    private string SelectedFormat { get; set; } = "none";
    private string SelectedFont { get; set; } = "none";
    private string SelectedFontSize { get; set; } = "none";
    private string SelectedFontColor { get; set; } = "none";
    private string SelectedBackgroundColor { get; set; } = "none";

    #region SelectCallbacks
    private async Task OnFormatSelected(ChangeEventArgs args)
    {
        await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.formatBlock, args.Value.ToString());
        SelectedFormat = "none";
    }
    private async Task OnFontSelected(ChangeEventArgs args)
    {
        await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.fontName, args.Value.ToString());
        SelectedFont = "none";
    }
    private async Task OnFontSizeSelected(ChangeEventArgs args)
    {
        await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.fontSize, args.Value.ToString());
        SelectedFontSize = "none";
    }
    private async Task OnFontColorSelected(ChangeEventArgs args)
    {
        await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.foreColor, args.Value.ToString());
        SelectedFontColor = "none";
    }
    private async Task OnBackgroundColorSelected(ChangeEventArgs args)
    {
        await DocumentEditor.ExecEditCommand(DocumentEditor.Commands.backColor, args.Value.ToString());
        SelectedBackgroundColor = "none";
    }
    #endregion
}
