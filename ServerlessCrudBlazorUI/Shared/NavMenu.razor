@inject AuthenticationStateProvider authStateProvider

<div class="pl-4 navbar navbar-dark">
    <ul class="nav flex-row w-100">
        <li class="nav-item px-3">
            <NavLink class="nav-link navbar-brand" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> <span class="hide-on-small-screen">Home</span>
            </NavLink>
        </li>
        @if (userIsAuthenticated)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="editor">
                    <span class="oi oi-pencil" aria-hidden="true"></span> <span class="hide-on-small-screen">New Blog Post</span>
                </NavLink>
            </li>
        }
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="blogposts">
                <span class="oi oi-book" aria-hidden="true"></span> <span class="hide-on-small-screen">Blog Posts</span>
            </NavLink>
        </li>
    </ul>
</div>

@code {
    private bool userIsAuthenticated = false;

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        userIsAuthenticated = task.Result.User.Identity.IsAuthenticated;
        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        userIsAuthenticated = (await authStateProvider.GetAuthenticationStateAsync()).User.Identity.IsAuthenticated;
        authStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }
}
